3. Enhancing the COR Graph
Challenge
For some fish, the 1-year or 10-year COR can be extremely high (thousands of %). Plotting that on a normal y-axis makes the lines for smaller returns almost flat near the bottom, and everything becomes hard to compare.

Solutions:
Use a Logarithmic Scale (for the y-axis):

In Chart.js, you can set type: 'logarithmic' for the y-axis scale. This compresses large numbers, so 500% and 50000% can still be on the same graph visibly.
Example:
js
Copy code
y: {
  type: 'logarithmic',
  // beginAtZero: false is typical in log scale
  ticks: {
    color: '#00ffff'
  }
}
Use a Secondary y-Axis:

Keep the smaller COR fish on the left axis, and the massive COR fish on the right axis.
Alternatively, if you only want to measure COR up to 5000% on the left axis, you might place the outliers on a second axis so the chart remains more readable.
Clamp or Cap Overly Large Values (less recommended, but simpler):

If a fish’s COR is over 10,000%, display “10,000+” or just clamp the data. This is somewhat less accurate but might be more user-friendly if your main point is to show that “Angel-FISH is through the roof, it’s off the scale!”
Interactivity / Tooltip:

Show the exact COR % in the tooltip but keep the y-axis at a more readable range (e.g., up to 5000%). This way, the line is pegged at the top, but the user can still see the real number on hover.
Animated Transitions

For a big “aha!” moment, you could animate the lines from 0% up to the COR. If the user changes token price from $0.05 to $1.25, you can do a small animation that shows how all lines jump up.
Bottom Line:

The simplest fix is switching the y-axis to “logarithmic” so your 21958% can appear on the same chart with 400% in a visually meaningful way.
Or, keep two separate scales: one for small to medium COR, one for extremely large COR.
Sample Code (Log Scale Example in Chart.js)
js
Copy code
options: {
  scales: {
    x: { ... },
    y: {
      type: 'logarithmic',
      // recommended: do NOT use beginAtZero in a log scale
      // else it triggers error or weird spacing
      ticks: {
        color: '#00ffff',
        callback: function (value, index, values) {
          // Since it's log scale, value is typically the exponent
          // or something. We can do a custom parse:
          return value.toString();
        }
      }
    }
  }
}
